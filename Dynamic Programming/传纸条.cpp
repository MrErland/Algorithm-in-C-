/*
*问题描述：一次素质拓展活动中，班上同学安排做成一个m行n列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。
*纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标(1,1)，小轩坐在矩阵的右下角，坐标(m,n)。
*从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。
*在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。
*班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。
*还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用0表示），可以用一个0-100的自然数来表示，数越大表示越好心。
*小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度只和最大。现在，请你帮助小渊和小轩找到这样的两条路径。
*输入描述：输入的第一行有2个用空格隔开的整数m和n，表示班里有m行n列（1<=m,n<=50）。
*接下来的m行是一个m*n的矩阵，矩阵中第i行j列的整数表示坐在第i行j列的学生的好心程度。每行的n个整数之间用空格隔开。
*输出：输出一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。
*/


/*
*采用平面上二维动态规划：
*   DP[i1][j1][i2][j2]中相当于保存了DP[i1][j1]和DP[i2][j2]之和，即第一条路线走到(i1,j1)处，第二条路线走到(i2,j2)处时，所经过地点的数值之和的最大值。
*/

#include <algorithm>  
#include <cstring>  
#include <iostream>
using namespace std;
const int N = 51;
static int a[N][N];
static int dp[N][N][N][N];

int main()
{
	int m, n;
	cin >> m >> n;
	for (int i = 1; i <= m; i++)
		for (int j = 1; j <= n; j++)
			cin >> a[i][j];
	for (int i1 = 1; i1 <= m; i1++)
	{
		for (int j1 = 1; j1 <= n; j1++)
		{
			for (int i2 = 1; i2 <= m; i2++)
			{
				for (int j2 = 1; j2 <= n; j2++)
				{
					int maxV = max(max(dp[i1 - 1][j1][i2 - 1][j2], dp[i1 - 1][j1][i2][j2 - 1]), max(dp[i1][j1 - 1][i2 - 1][j2], dp[i1][j1 - 1][i2][j2 - 1]));
					if (i1 == i2 && j1 == j2)
						dp[i1][j1][i2][j2] = a[i1][j1] + maxV;
					else
						dp[i1][j1][i2][j2] = a[i1][j1] + a[i2][j2] + maxV;
				}
			}
		}
	}
	cout << dp[m][n][m][n];
	return 0;
}
